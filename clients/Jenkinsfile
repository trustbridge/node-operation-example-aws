#!groovy

// Build pipeline for the devnet environment
// This pipeline provides a centralised point to control the build of the various components that make up the devnet deployment
// The pipeline expects to be called from other pipelines which will update the parameters of the repo they come from

pipeline {
    agent {
        label 'hamlet-latest'
    }
    options {
        timestamps ()
        buildDiscarder(
            logRotator(
                daysToKeepStr: '14'
            )
        )
        disableConcurrentBuilds()
        durabilityHint('PERFORMANCE_OPTIMIZED')
        parallelsAlwaysFailFast()
        checkoutToSubdirectory('deploy')
    }

    environment {
        properties_file = "/var/opt/properties/devnet.properties"
        GITHUB_CREDENTIALS = credentials('github')
    }

    parameters {
        string(
            name: 'branchref_intercustomsledger',
            defaultValue: 'master',
            description: 'The commit to use for the deploy'
        )
        string(
            name: 'branchref_chambersapp',
            defaultValue: 'master',
            description: 'The commit to use for the deploy'
        )
        string(
            name: 'branchref_tradeportal',
            defaultValue: 'master',
            description: 'The commit to use for the deploy'
        )
        string(
            name: 'branchref_haiglp2',
            defaultValue: 'master',
            description: 'The commit to use for the deploy'
        )

        string(
            name: 'branchref_tradetrustwebsite',
            defaultValue: 'master',
            description: 'The commit to use for the deploy'
        )

        booleanParam(
            name: 'force_tradeportal',
            defaultValue : false,
            description: 'Force build of trande portal components'
        )
        booleanParam(
            name: 'force_chambers',
            defaultValue : false,
            description: 'Force build of chambers components'
        )
        booleanParam(
            name: 'force_imports',
            defaultValue: false,
            description: 'Force build of imports components'
        )
        booleanParam(
            name: 'force_exports',
            defaultValue: false,
            description: 'Force build of exports components'
        )
        booleanParam(
            name: 'force_tradetrust',
            defaultValue: false,
            description: 'Force build of trade trust signing'
        )
        booleanParam(
            name: 'force_tradetrustwebsite',
            defaultValue: false,
            description: 'Force build of trade trust website'
        )
    }

    stages {
        // Django Apps
        stage('Build_Artefact - Trade Portal') {
            when {
                anyOf {
                    equals expected: true, actual: params.force_tradeportal
                    allOf {
                        not {
                            equals expected: 'master', actual: "${params.branchref_tradeportal}"
                        }
                        branch 'master'
                    }
                }
            }

            environment {
                //hamlet deployment variables
                deployment_units = 'www-trd,www-task-trd,www-work-trd,www-util-trd'
                segment = 'clients'
                image_format = 'docker'
                BUILD_PATH = 'tradeportal-app/'
                DOCKER_CONTEXT_DIR = 'tradeportal-app/trade_portal/'
                BUILD_SRC_DIR = 'trade_portal/'
                DOCKER_FILE = 'tradeportal-app/trade_portal/compose/production/django/Dockerfile'
            }

            steps {
                dir("tradeportal-app/") {
                    script {
                        def repoTradePortal = checkout(
                            [
                                $class: 'GitSCM',
                                branches: [[name: "${env.branchref_tradeportal}" ]],
                                userRemoteConfigs: [[
                                    credentialsId: 'github',
                                    url: 'https://github.com/trustbridge/trade_portal'
                                ]]
                            ]
                        )
                        env.gitcommit_tradeportal = repoTradePortal.GIT_COMMIT
                    }
                }

                echo "GIT_COMMIT is ${env.gitcommit_tradeportal}"

                dir("tradeportal-app/trade_portal/trade_portal") {
                    sh '''
                        npm ci
                        npm run build
                    '''
                }

                uploadImageToRegistry(
                    "${env.properties_file}",
                    "${env.deployment_units.split(',')[0]}",
                    "${env.image_format}",
                    "${env.gitcommit_tradeportal}"
                )

                build job: '../cote-c1/deploy-clients', wait: false, parameters: [
                        extendedChoice(name: 'DEPLOYMENT_UNITS', value: "${env.deployment_units}"),
                        string(name: 'GIT_COMMIT', value: "${env.gitcommit_tradeportal}"),
                        booleanParam(name: 'AUTODEPLOY', value: true),
                        string(name: 'IMAGE_FORMATS', value: "${env.image_format}"),
                ]
            }

            post {
                success {
                    slackSend (
                        message: "Build Completed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n Trade Portal App Build Completed",
                        channel: "#igl-automatic-messages",
                        color: "#50C878"
                    )
                }

                failure {
                    slackSend (
                        message: "Build Failed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n Trade Portal App Build Failed",
                        channel: "#igl-automatic-messages",
                        color: "#B22222"
                    )
                }
            }
        }

        stage('Build_Artefact - TradeTrust') {
             when {
                anyOf {
                    equals expected: true, actual: params.force_tradetrust
                    allOf {
                        not {
                            equals expected: 'master', actual: "${params.branchref_haiglp2}"
                        }
                        branch 'master'
                    }
                }
            }

            stages{
                stage('Setup') {
                    steps {
                        dir("ha-igl-p2/") {
                            script {
                                def repo = checkout(
                                    [
                                        $class: 'GitSCM',
                                        branches: [[name: "${env.branchref_haiglp2}" ]],
                                        userRemoteConfigs: [[
                                            credentialsId: 'github',
                                            url: 'https://github.com/gs-gs/ha-igl-p2'
                                        ]]
                                    ]
                                )
                                env.gitcommit_haiglp2 = repo.GIT_COMMIT
                            }
                        }

                        echo "GIT_COMMIT is ${env.gitcommit_haiglp2}"
                    }
                }

                stage('openatt-api') {
                    environment {
                        //hamlet deployment variables
                        deployment_units = 'openatt-api'
                        segment = 'clients'
                        image_format = 'swagger'
                        BUILD_SRC_DIR = 'clients/'
                    }

                    steps {

                        dir('deploy/clients/openatt_api/apigw') {
                            sh '''
                                mv "swagger.json" "swagger-extended-base.json"
                                zip -j "swagger.zip" "swagger-extended-base.json"
                                mkdir -p ${WORKSPACE}/clients/dist/
                                cp "swagger.zip" ${WORKSPACE}/clients/dist/swagger.zip
                            '''
                        }

                        uploadImageToRegistry(
                            "${env.properties_file}",
                            "${env.deployment_units.split(',')[0]}",
                            "${env.image_format}",
                            "${env.gitcommit_haiglp2}"
                        )

                        build job: '../cote-c1/deploy-clients', wait: false, parameters: [
                                extendedChoice(name: 'DEPLOYMENT_UNITS', value: "${env.deployment_units}"),
                                string(name: 'GIT_COMMIT', value: "${env.gitcommit_haiglp2}"),
                                booleanParam(name: 'AUTODEPLOY', value: true),
                                string(name: 'IMAGE_FORMATS', value: "${env.image_format}"),
                        ]
                    }
                }

                stage('openatt-api-imp') {
                    environment {
                        //hamlet deployment variables
                        deployment_units = 'openatt-api-imp'
                        segment = 'clients'
                        image_format = 'lambda'

                        BUILD_PATH = 'ha-igl-p2/tradetrust/open-attestation-api'
                        BUILD_SRC_DIR = ''
                    }

                    steps {

                        dir('ha-igl-p2/tradetrust/open-attestation-api') {
                            sh '''#!/bin/bash
                                npm ci
                                npx serverless package
                                mkdir -p src/dist
                                cp .serverless/openatt-api.zip src/dist/lambda.zip
                            '''
                        }

                        uploadImageToRegistry(
                            "${env.properties_file}",
                            "${env.deployment_units.split(',')[0]}",
                            "${env.image_format}",
                            "${env.gitcommit_haiglp2}"
                        )

                        build job: '../cote-c1/deploy-clients', wait: false, parameters: [
                                extendedChoice(name: 'DEPLOYMENT_UNITS', value: "${env.deployment_units}"),
                                string(name: 'GIT_COMMIT', value: "${env.gitcommit_haiglp2}"),
                                booleanParam(name: 'AUTODEPLOY', value: true),
                                string(name: 'IMAGE_FORMATS', value: "${env.image_format}"),
                        ]
                    }
                }

                stage('openatt-worker') {

                    environment {
                        //hamlet deployment variables
                        deployment_units = 'openatt-worker,openatt-contract'
                        segment = 'channel'
                        image_format = 'docker'
                        BUILD_PATH = 'ha-igl-p2/tradetrust/document-store-worker'
                        DOCKER_CONTEXT_DIR = 'ha-igl-p2/tradetrust/document-store-worker'
                        BUILD_SRC_DIR = ''
                        DOCKER_FILE = 'ha-igl-p2/tradetrust/document-store-worker/Dockerfile'
                    }

                    steps {

                        uploadImageToRegistry(
                            "${env.properties_file}",
                            "${env.deployment_units.split(',')[0]}",
                            "${env.image_format}",
                            "${env.gitcommit_haiglp2}"
                        )

                        build job: '../cote-c1/deploy-clients', wait: false, parameters: [
                                extendedChoice(name: 'DEPLOYMENT_UNITS', value: "${env.deployment_units}"),
                                string(name: 'GIT_COMMIT', value: "${env.gitcommit_haiglp2}"),
                                booleanParam(name: 'AUTODEPLOY', value: true),
                                string(name: 'IMAGE_FORMATS', value: "${env.image_format}"),
                        ]
                    }
                }
            }

            post {
                success {
                    slackSend (
                        message: "Build Completed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n TradeTrust Build Completed",
                        channel: "#igl-automatic-messages",
                        color: "#50C878"
                    )
                }

                failure {
                    slackSend (
                        message: "Build Failed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n TradeTrust Build Failed",
                        channel: "#igl-automatic-messages",
                        color: "#B22222"
                    )
                }
            }
        }

        stage('Build_Artefact - TradeTrust Verify') {
             when {
                anyOf {
                    equals expected: true, actual: params.force_tradetrustwebsite
                    allOf {
                        not {
                            equals expected: 'master', actual: "${params.branchref_tradetrustwebsite}"
                        }
                        branch 'master'
                    }
                }
            }

            stages{
                stage('Setup') {
                    steps {
                        dir("tradetrust-website/") {
                            script {
                                def repo = checkout(
                                    [
                                        $class: 'GitSCM',
                                        branches: [[name: "${env.branchref_tradetrustwebsite}" ]],
                                        userRemoteConfigs: [[
                                            credentialsId: 'github',
                                            url: 'https://github.com/gs-gs/tradetrust-website'
                                        ]]
                                    ]
                                )
                                env.gitcommit_tradetrustwebsite = repo.GIT_COMMIT
                            }
                        }

                        echo "GIT_COMMIT is ${env.gitcommit_tradetrustwebsite}"
                    }
                }

                stage('tradetrust-webiste') {

                    environment {
                        //hamlet deployment variables
                        deployment_units = 'tradetrust-website'
                        segment = 'clients'
                        image_format = 'docker'
                        BUILD_PATH = 'tradetrust-website/'
                        DOCKER_CONTEXT_DIR = 'tradetrust-website'
                        BUILD_SRC_DIR = ''
                        DOCKER_FILE = 'tradetrust-website/docker/Dockerfile'
                    }

                    steps {

                        uploadImageToRegistry(
                            "${env.properties_file}",
                            "${env.deployment_units.split(',')[0]}",
                            "${env.image_format}",
                            "${env.gitcommit_tradetrustwebsite}"
                        )

                        build job: '../cote-c1/deploy-clients', wait: false, parameters: [
                                extendedChoice(name: 'DEPLOYMENT_UNITS', value: "${env.deployment_units}"),
                                string(name: 'GIT_COMMIT', value: "${env.gitcommit_tradetrustwebsite}"),
                                booleanParam(name: 'AUTODEPLOY', value: true),
                                string(name: 'IMAGE_FORMATS', value: "${env.image_format}"),
                        ]
                    }
                }
            }

            post {
                success {
                    slackSend (
                        message: "Build Completed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n TradeTrust Verify Build Completed",
                        channel: "#igl-automatic-messages",
                        color: "#50C878"
                    )
                }

                failure {
                    slackSend (
                        message: "Build Failed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n TradeTrust Verify Build Failed",
                        channel: "#igl-automatic-messages",
                        color: "#B22222"
                    )
                }
            }
        }

    }

    post {
        cleanup {
            cleanWs()
        }
    }
}


void uploadImageToRegistry( properties_file, deployment_unit, image_format, git_commit )   {

    script {
        env['deployment_unit'] = "${deployment_unit}"
        env['image_format'] = "${image_format}"
        env['unit_git_commit'] = "${git_commit}"
    }

    // Product Setup
    script {
        def contextProperties = readProperties interpolate: true, file: "${properties_file}" ;
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
    ${AUTOMATION_BASE_DIR}/setContext.sh || exit $?
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
    ${AUTOMATION_DIR}/manageImages.sh -g "${unit_git_commit}" -u "${deployment_unit}" -f "${image_format}"  || exit $?
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

}
